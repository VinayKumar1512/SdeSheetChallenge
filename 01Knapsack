import java.util.ArrayList;
import java.util.*;
public class Solution {

  public static int maxProfit(ArrayList<Integer> values, ArrayList<Integer> weights, int n, int w) {

    int dp[][] = new int[n + 1][w + 1];
    for (int row[] : dp)
      Arrays.fill(row, -1);
    return maxProfits(values, weights, 0, n, w, dp);
  }

  public static int maxProfits(ArrayList<Integer> profit, ArrayList<Integer> wts, int idx, int n, int W, int dp[][]) {

    if (W == 0 || (idx == n && W > 0)) {
      return 0;
    }

    if (W < 0) {
      return Integer.MIN_VALUE;
    }

    if (dp[idx][W] != -1) {
      return dp[idx][W];
    }
    int include = profit.get(idx) + maxProfits(profit, wts, idx + 1, n, W - wts.get(idx), dp);
    int exclude = maxProfits(profit, wts, idx + 1, n, W, dp);

    int ans =  Math.max(include, exclude);
    dp[idx][W] = ans;
    return ans;
  }

}
