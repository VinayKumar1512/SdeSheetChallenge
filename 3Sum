import java.util.* ;
import java.io.*; 
public class Solution {

	public static ArrayList<ArrayList<Integer>> findTriplets(int[] arr, int n, int K)  {

        Arrays.sort(arr);
     HashSet<ArrayList<Integer>> hs =new HashSet<>();
     ArrayList<ArrayList<Integer>> ans =new ArrayList<>();
	for(int i=0;i<arr.length;i++){
        
        if (i == 0 || (i > 0 && arr[i] != arr[i - 1])) {
        int remTarget= K - arr[i];
        
        //have all pairs with remTarget
        ArrayList<ArrayList<Integer>> pairs= getAllPairs(arr,i+1,arr.length-1,remTarget);
        
        for( ArrayList<Integer> pair: pairs){
           ArrayList<Integer> list =new ArrayList<>();
            list.add(pair.get(0));
            list.add(pair.get(1));
            list.add(arr[i]);
            ans.add(list);
        }
        
    } 
    }
        return ans;
	}
    
    public static ArrayList<ArrayList<Integer>> getAllPairs(int arr[],int si,int ei,int target){
        
        ArrayList<ArrayList<Integer>> list =new ArrayList<>();
        int low= si;
        int high= ei;
        
        while(low < high){
            
            if(arr[low] + arr[high]==target){
                ArrayList<Integer> li = new ArrayList<>();
                li.add(arr[low]);
                li.add(arr[high]);
                list.add(li);
                
                 while (low < high && arr[low] == arr[low + 1]) low++;
                        while (low < high && arr[high] == arr[high - 1]) high--;
                low++;
                high--;
            }
            else if(arr[low] + arr[high] > target){
                high--;
            }
            else{
                low++;
            }
        }
       
        return list;
    }
}
