import java.util.ArrayList;
import java.util.*;
public class Solution {
    public static int maxIncreasingDumbbellsSum(ArrayList < Integer > arr, int n) {

        int dp[][] = new int[n+1][n+1];
        
//         for (int i = 0; i < n; i++) {
//             Arrays.fill(dp[i],-1);
//         }
//         return maxSum(arr, n, 0, -1,dp);
        
        for(int indi= n-1;indi>=0;indi--){
            for(int previdx= indi-1;previdx>=-1;previdx--){
                int sum = dp[indi+1][previdx+1];
                
                if(previdx==-1 || arr.get(indi) > arr.get(previdx)){
                    sum = Math.max(sum, arr.get(indi) + dp[indi+1][indi+1]);
                }
                
                dp[indi][previdx+1]= sum;
            }
        }
        
        return dp[0][0];
    }

    public static int maxSum(ArrayList < Integer > arr, int n, int idx, int prev,int dp[][]) {
        //max sum we can make at idx==n is 0
        if (idx == n) {
            return 0;
        }

        if(dp[idx][prev+1]!=-1){
            return dp[idx][prev+1];
        }
        int include = 0;
        if (prev == -1 || arr.get(prev) < arr.get(idx)) {
            include = arr.get(idx) + maxSum(arr, n, idx + 1, idx,dp);
        }

        int exclude = maxSum(arr, n, idx + 1, prev,dp);

        int ans = Math.max(include, exclude);
        dp[idx][prev+1]= ans;
        return ans;
    }
}
