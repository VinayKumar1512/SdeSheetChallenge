import java.util.ArrayList;

public class Solution {
	public static int maximumProduct(ArrayList<Integer> arr, int n) {
		//brute force generate all subarray and have the maximum product subarray
        //O(N^2)
//         int maxProduct= Integer.MIN_VALUE;
//         for(int i=0;i<arr.size();i++){
//             int prefixProduct=1;    
//             for(int j=i;j<arr.size();j++){
//                 prefixProduct*=arr.get(j);
//                 maxProduct= Math.max(maxProduct,prefixProduct);
//             }
//         }
        
//         return maxProduct;
        //kadane's algo
         int maxProduct= 0;
         int maxEnding=1; 
        int minEnding=1;
        int flag=0;
        for(int i=0;i<arr.size();i++){   
            //if coming value si positve 
            if(arr.get(i)>0){
                maxEnding*=arr.get(i);
                //keep track of minProduct becuase there may be case a negative number comes and makes it as the largest product of subarray
                minEnding=Math.min(1,minEnding*arr.get(i));
                flag=1;
            }
            else if(arr.get(i)<0){
                int temp= maxEnding;
                maxEnding=Math.max(1,minEnding*arr.get(i));
                minEnding= temp*arr.get(i);
            }
            else{
                //if 0 comes max and min product till ith is 1
                maxEnding=1;
                minEnding=1;
            }
            maxProduct= Math.max(maxProduct,maxEnding);
        }
        
        //if all numbers are negative
        if(flag==0 && maxProduct==0){
            return 0;
        }
        
        if(maxProduct==1){
            maxProduct= arr.get(0);
            for(int i=1;i<arr.size();i++){
                maxProduct= Math.max(arr.get(i),maxProduct);
            }
        }
        
        
        return maxProduct;
	}
}
